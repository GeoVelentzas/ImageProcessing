function [r, c, A, A_t] = hough2d(img1, p1, img2, p2, binsize, thres);
% Ευρεση της εικονας img1 μεσα στην img2

%Yπολογισμος διαστασεων εικονων
r1 = size(img1,1);  c1 = size(img1,2);
r2 = size(img2,1);  c2 = size(img2,2);

%Kατασκευη accumulator με καταλληλο μεγεθος
A = zeros(r1+r2-1,c1+c2-1);


%Kατασκευη πινακα ψηφων.Ουσιαστικα θα εχουμε μια binary εικονα με μηδενικα
%οπου δεν υπαρχει ψηφος και ασσους οπου υπαρχει. Ο πινακας αυτος προκυπτει
%αν εχουμε ασσους μονο στα σημεια γωνιων της εικονας μοντελου και επειτα
%τον τουμπαρουμε κατα x και y. Στη συνεχεια με dilate δινουμε ψηφο σε μια
%περοχη που καθοριζεται απο το binsize και οχι μονο σε ενα σημειο.
vote_matrix = zeros(r1,c1);
for i = 1:size(p1,1)
    vote_matrix(p1(i,1),p1(i,2)) = 1;
end
vote_matrix = fliplr(flipud(vote_matrix));
vote_matrix = imdilate(vote_matrix,ones(binsize,binsize));


%Αθροισμα ψηφων στον Acummulator. Θεωρουμε ως κεντρο εικονας το 200,150 αρα
%στον vote_matrix το 201,151 για το συγκεκριμενο παραδειγμα της ασκησης.Καθε 
%φορα που εχουμε μια γωνια προσθετουμε στο τμημα του accumulator τον πινακα
%ψηφων κεντραρισμενο στο σημειο αυτο.
for i = 1:size(p2,1)
    A(p2(i,1):p2(i,1)+r1-1 , p2(i,2):p2(i,2)+c1-1) = ...
        A(p2(i,1):p2(i,1)+r1-1 , p2(i,2):p2(i,2)+c1-1) + vote_matrix;
end


%Κατωφλιοποιηση του Αccumulator
T = (A > thres * max(A(:)));
A_t = A.*T;


%Υπολογισμος τοπικων μεγιστων του κατωφλιοποιημενου ως πιθανα κεντρα και
%αντιστοιχιση σε γραμμες και στηλες της εικονας
[r c mx]=local_max(A_t);
r = r - r1/2;
c = c - c1/2;


end

